name: Docker Compose Build, Push & Deploy

on:
  push:
    branches: ["master"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Create .env file for CI
        run: |
          touch .env
          echo "# CI environment file" > .env

      - name: Build images via compose
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
          IMAGE_TAG: ${{ steps.meta.outputs.sha_short }}
        run: docker compose build --parallel

      - name: Test images
        env:
          IMAGE_TAG: ${{ steps.meta.outputs.sha_short }}
        run: |
          echo "Testing built images..."
          docker compose config --quiet

      - name: Push images to DockerHub
        env:
          IMAGE_TAG: ${{ steps.meta.outputs.sha_short }}
        run: docker compose push

      - name: Clean up Docker resources
        if: always()
        run: |
          docker compose down --volumes --remove-orphans || true
          docker system prune -f --volumes || true

      - name: Write image tag for deploy job
        run: echo "${{ steps.meta.outputs.sha_short }}" > .github/image_tag.txt

      - name: Upload image tag for deploy job
        uses: actions/upload-artifact@v4
        with:
          name: image_tag
          path: .github/image_tag.txt

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Download image tag
        uses: actions/download-artifact@v4
        with:
          name: image_tag

      - name: Read image tag
        id: get_tag
        run: echo "tag=$(cat image_tag.txt)" >> $GITHUB_OUTPUT

      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            cd /home/justin/dev/XKA/xka
            export IMAGE_TAG=${{ steps.get_tag.outputs.tag }}
            docker compose pull
            docker compose up -d --remove-orphans