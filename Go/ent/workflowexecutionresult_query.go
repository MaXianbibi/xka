// Code generated by ent, DO NOT EDIT.

package ent

import (
	"XKA/ent/predicate"
	"XKA/ent/workflow"
	"XKA/ent/workflowexecutionresult"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkflowExecutionResultQuery is the builder for querying WorkflowExecutionResult entities.
type WorkflowExecutionResultQuery struct {
	config
	ctx          *QueryContext
	order        []workflowexecutionresult.OrderOption
	inters       []Interceptor
	predicates   []predicate.WorkflowExecutionResult
	withWorkflow *WorkflowQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkflowExecutionResultQuery builder.
func (werq *WorkflowExecutionResultQuery) Where(ps ...predicate.WorkflowExecutionResult) *WorkflowExecutionResultQuery {
	werq.predicates = append(werq.predicates, ps...)
	return werq
}

// Limit the number of records to be returned by this query.
func (werq *WorkflowExecutionResultQuery) Limit(limit int) *WorkflowExecutionResultQuery {
	werq.ctx.Limit = &limit
	return werq
}

// Offset to start from.
func (werq *WorkflowExecutionResultQuery) Offset(offset int) *WorkflowExecutionResultQuery {
	werq.ctx.Offset = &offset
	return werq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (werq *WorkflowExecutionResultQuery) Unique(unique bool) *WorkflowExecutionResultQuery {
	werq.ctx.Unique = &unique
	return werq
}

// Order specifies how the records should be ordered.
func (werq *WorkflowExecutionResultQuery) Order(o ...workflowexecutionresult.OrderOption) *WorkflowExecutionResultQuery {
	werq.order = append(werq.order, o...)
	return werq
}

// QueryWorkflow chains the current query on the "workflow" edge.
func (werq *WorkflowExecutionResultQuery) QueryWorkflow() *WorkflowQuery {
	query := (&WorkflowClient{config: werq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := werq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := werq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workflowexecutionresult.Table, workflowexecutionresult.FieldID, selector),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflowexecutionresult.WorkflowTable, workflowexecutionresult.WorkflowColumn),
		)
		fromU = sqlgraph.SetNeighbors(werq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkflowExecutionResult entity from the query.
// Returns a *NotFoundError when no WorkflowExecutionResult was found.
func (werq *WorkflowExecutionResultQuery) First(ctx context.Context) (*WorkflowExecutionResult, error) {
	nodes, err := werq.Limit(1).All(setContextOp(ctx, werq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workflowexecutionresult.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (werq *WorkflowExecutionResultQuery) FirstX(ctx context.Context) *WorkflowExecutionResult {
	node, err := werq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkflowExecutionResult ID from the query.
// Returns a *NotFoundError when no WorkflowExecutionResult ID was found.
func (werq *WorkflowExecutionResultQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = werq.Limit(1).IDs(setContextOp(ctx, werq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workflowexecutionresult.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (werq *WorkflowExecutionResultQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := werq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkflowExecutionResult entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkflowExecutionResult entity is found.
// Returns a *NotFoundError when no WorkflowExecutionResult entities are found.
func (werq *WorkflowExecutionResultQuery) Only(ctx context.Context) (*WorkflowExecutionResult, error) {
	nodes, err := werq.Limit(2).All(setContextOp(ctx, werq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workflowexecutionresult.Label}
	default:
		return nil, &NotSingularError{workflowexecutionresult.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (werq *WorkflowExecutionResultQuery) OnlyX(ctx context.Context) *WorkflowExecutionResult {
	node, err := werq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkflowExecutionResult ID in the query.
// Returns a *NotSingularError when more than one WorkflowExecutionResult ID is found.
// Returns a *NotFoundError when no entities are found.
func (werq *WorkflowExecutionResultQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = werq.Limit(2).IDs(setContextOp(ctx, werq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workflowexecutionresult.Label}
	default:
		err = &NotSingularError{workflowexecutionresult.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (werq *WorkflowExecutionResultQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := werq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkflowExecutionResults.
func (werq *WorkflowExecutionResultQuery) All(ctx context.Context) ([]*WorkflowExecutionResult, error) {
	ctx = setContextOp(ctx, werq.ctx, ent.OpQueryAll)
	if err := werq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkflowExecutionResult, *WorkflowExecutionResultQuery]()
	return withInterceptors[[]*WorkflowExecutionResult](ctx, werq, qr, werq.inters)
}

// AllX is like All, but panics if an error occurs.
func (werq *WorkflowExecutionResultQuery) AllX(ctx context.Context) []*WorkflowExecutionResult {
	nodes, err := werq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkflowExecutionResult IDs.
func (werq *WorkflowExecutionResultQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if werq.ctx.Unique == nil && werq.path != nil {
		werq.Unique(true)
	}
	ctx = setContextOp(ctx, werq.ctx, ent.OpQueryIDs)
	if err = werq.Select(workflowexecutionresult.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (werq *WorkflowExecutionResultQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := werq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (werq *WorkflowExecutionResultQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, werq.ctx, ent.OpQueryCount)
	if err := werq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, werq, querierCount[*WorkflowExecutionResultQuery](), werq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (werq *WorkflowExecutionResultQuery) CountX(ctx context.Context) int {
	count, err := werq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (werq *WorkflowExecutionResultQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, werq.ctx, ent.OpQueryExist)
	switch _, err := werq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (werq *WorkflowExecutionResultQuery) ExistX(ctx context.Context) bool {
	exist, err := werq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkflowExecutionResultQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (werq *WorkflowExecutionResultQuery) Clone() *WorkflowExecutionResultQuery {
	if werq == nil {
		return nil
	}
	return &WorkflowExecutionResultQuery{
		config:       werq.config,
		ctx:          werq.ctx.Clone(),
		order:        append([]workflowexecutionresult.OrderOption{}, werq.order...),
		inters:       append([]Interceptor{}, werq.inters...),
		predicates:   append([]predicate.WorkflowExecutionResult{}, werq.predicates...),
		withWorkflow: werq.withWorkflow.Clone(),
		// clone intermediate query.
		sql:  werq.sql.Clone(),
		path: werq.path,
	}
}

// WithWorkflow tells the query-builder to eager-load the nodes that are connected to
// the "workflow" edge. The optional arguments are used to configure the query builder of the edge.
func (werq *WorkflowExecutionResultQuery) WithWorkflow(opts ...func(*WorkflowQuery)) *WorkflowExecutionResultQuery {
	query := (&WorkflowClient{config: werq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	werq.withWorkflow = query
	return werq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkflowExecutionResult.Query().
//		GroupBy(workflowexecutionresult.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (werq *WorkflowExecutionResultQuery) GroupBy(field string, fields ...string) *WorkflowExecutionResultGroupBy {
	werq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkflowExecutionResultGroupBy{build: werq}
	grbuild.flds = &werq.ctx.Fields
	grbuild.label = workflowexecutionresult.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.WorkflowExecutionResult.Query().
//		Select(workflowexecutionresult.FieldCreateTime).
//		Scan(ctx, &v)
func (werq *WorkflowExecutionResultQuery) Select(fields ...string) *WorkflowExecutionResultSelect {
	werq.ctx.Fields = append(werq.ctx.Fields, fields...)
	sbuild := &WorkflowExecutionResultSelect{WorkflowExecutionResultQuery: werq}
	sbuild.label = workflowexecutionresult.Label
	sbuild.flds, sbuild.scan = &werq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkflowExecutionResultSelect configured with the given aggregations.
func (werq *WorkflowExecutionResultQuery) Aggregate(fns ...AggregateFunc) *WorkflowExecutionResultSelect {
	return werq.Select().Aggregate(fns...)
}

func (werq *WorkflowExecutionResultQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range werq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, werq); err != nil {
				return err
			}
		}
	}
	for _, f := range werq.ctx.Fields {
		if !workflowexecutionresult.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if werq.path != nil {
		prev, err := werq.path(ctx)
		if err != nil {
			return err
		}
		werq.sql = prev
	}
	return nil
}

func (werq *WorkflowExecutionResultQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkflowExecutionResult, error) {
	var (
		nodes       = []*WorkflowExecutionResult{}
		_spec       = werq.querySpec()
		loadedTypes = [1]bool{
			werq.withWorkflow != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkflowExecutionResult).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkflowExecutionResult{config: werq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, werq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := werq.withWorkflow; query != nil {
		if err := werq.loadWorkflow(ctx, query, nodes, nil,
			func(n *WorkflowExecutionResult, e *Workflow) { n.Edges.Workflow = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (werq *WorkflowExecutionResultQuery) loadWorkflow(ctx context.Context, query *WorkflowQuery, nodes []*WorkflowExecutionResult, init func(*WorkflowExecutionResult), assign func(*WorkflowExecutionResult, *Workflow)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*WorkflowExecutionResult)
	for i := range nodes {
		fk := nodes[i].WorkflowID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workflow.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workflow_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (werq *WorkflowExecutionResultQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := werq.querySpec()
	_spec.Node.Columns = werq.ctx.Fields
	if len(werq.ctx.Fields) > 0 {
		_spec.Unique = werq.ctx.Unique != nil && *werq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, werq.driver, _spec)
}

func (werq *WorkflowExecutionResultQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workflowexecutionresult.Table, workflowexecutionresult.Columns, sqlgraph.NewFieldSpec(workflowexecutionresult.FieldID, field.TypeUUID))
	_spec.From = werq.sql
	if unique := werq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if werq.path != nil {
		_spec.Unique = true
	}
	if fields := werq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowexecutionresult.FieldID)
		for i := range fields {
			if fields[i] != workflowexecutionresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if werq.withWorkflow != nil {
			_spec.Node.AddColumnOnce(workflowexecutionresult.FieldWorkflowID)
		}
	}
	if ps := werq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := werq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := werq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := werq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (werq *WorkflowExecutionResultQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(werq.driver.Dialect())
	t1 := builder.Table(workflowexecutionresult.Table)
	columns := werq.ctx.Fields
	if len(columns) == 0 {
		columns = workflowexecutionresult.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if werq.sql != nil {
		selector = werq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if werq.ctx.Unique != nil && *werq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range werq.predicates {
		p(selector)
	}
	for _, p := range werq.order {
		p(selector)
	}
	if offset := werq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := werq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkflowExecutionResultGroupBy is the group-by builder for WorkflowExecutionResult entities.
type WorkflowExecutionResultGroupBy struct {
	selector
	build *WorkflowExecutionResultQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wergb *WorkflowExecutionResultGroupBy) Aggregate(fns ...AggregateFunc) *WorkflowExecutionResultGroupBy {
	wergb.fns = append(wergb.fns, fns...)
	return wergb
}

// Scan applies the selector query and scans the result into the given value.
func (wergb *WorkflowExecutionResultGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wergb.build.ctx, ent.OpQueryGroupBy)
	if err := wergb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkflowExecutionResultQuery, *WorkflowExecutionResultGroupBy](ctx, wergb.build, wergb, wergb.build.inters, v)
}

func (wergb *WorkflowExecutionResultGroupBy) sqlScan(ctx context.Context, root *WorkflowExecutionResultQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wergb.fns))
	for _, fn := range wergb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wergb.flds)+len(wergb.fns))
		for _, f := range *wergb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wergb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wergb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkflowExecutionResultSelect is the builder for selecting fields of WorkflowExecutionResult entities.
type WorkflowExecutionResultSelect struct {
	*WorkflowExecutionResultQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wers *WorkflowExecutionResultSelect) Aggregate(fns ...AggregateFunc) *WorkflowExecutionResultSelect {
	wers.fns = append(wers.fns, fns...)
	return wers
}

// Scan applies the selector query and scans the result into the given value.
func (wers *WorkflowExecutionResultSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wers.ctx, ent.OpQuerySelect)
	if err := wers.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkflowExecutionResultQuery, *WorkflowExecutionResultSelect](ctx, wers.WorkflowExecutionResultQuery, wers, wers.inters, v)
}

func (wers *WorkflowExecutionResultSelect) sqlScan(ctx context.Context, root *WorkflowExecutionResultQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wers.fns))
	for _, fn := range wers.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wers.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wers.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
