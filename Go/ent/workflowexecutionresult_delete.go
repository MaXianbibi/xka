// Code generated by ent, DO NOT EDIT.

package ent

import (
	"XKA/ent/predicate"
	"XKA/ent/workflowexecutionresult"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowExecutionResultDelete is the builder for deleting a WorkflowExecutionResult entity.
type WorkflowExecutionResultDelete struct {
	config
	hooks    []Hook
	mutation *WorkflowExecutionResultMutation
}

// Where appends a list predicates to the WorkflowExecutionResultDelete builder.
func (werd *WorkflowExecutionResultDelete) Where(ps ...predicate.WorkflowExecutionResult) *WorkflowExecutionResultDelete {
	werd.mutation.Where(ps...)
	return werd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (werd *WorkflowExecutionResultDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, werd.sqlExec, werd.mutation, werd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (werd *WorkflowExecutionResultDelete) ExecX(ctx context.Context) int {
	n, err := werd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (werd *WorkflowExecutionResultDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workflowexecutionresult.Table, sqlgraph.NewFieldSpec(workflowexecutionresult.FieldID, field.TypeUUID))
	if ps := werd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, werd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	werd.mutation.done = true
	return affected, err
}

// WorkflowExecutionResultDeleteOne is the builder for deleting a single WorkflowExecutionResult entity.
type WorkflowExecutionResultDeleteOne struct {
	werd *WorkflowExecutionResultDelete
}

// Where appends a list predicates to the WorkflowExecutionResultDelete builder.
func (werdo *WorkflowExecutionResultDeleteOne) Where(ps ...predicate.WorkflowExecutionResult) *WorkflowExecutionResultDeleteOne {
	werdo.werd.mutation.Where(ps...)
	return werdo
}

// Exec executes the deletion query.
func (werdo *WorkflowExecutionResultDeleteOne) Exec(ctx context.Context) error {
	n, err := werdo.werd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workflowexecutionresult.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (werdo *WorkflowExecutionResultDeleteOne) ExecX(ctx context.Context) {
	if err := werdo.Exec(ctx); err != nil {
		panic(err)
	}
}
