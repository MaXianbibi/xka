// Code generated by ent, DO NOT EDIT.

package ent

import (
	"XKA/ent/workflow"
	"XKA/ent/workflowexecutionresult"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkflowExecutionResult is the model entity for the WorkflowExecutionResult schema.
type WorkflowExecutionResult struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// WorkflowID holds the value of the "workflow_id" field.
	WorkflowID uuid.UUID `json:"workflow_id,omitempty"`
	// Status holds the value of the "status" field.
	Status workflowexecutionresult.Status `json:"status,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt int64 `json:"started_at,omitempty"`
	// EndedAt holds the value of the "ended_at" field.
	EndedAt *int64 `json:"ended_at,omitempty"`
	// DurationMs holds the value of the "duration_ms" field.
	DurationMs *int64 `json:"duration_ms,omitempty"`
	// GlobalLogs holds the value of the "global_logs" field.
	GlobalLogs []string `json:"global_logs,omitempty"`
	// Error holds the value of the "error" field.
	Error *string `json:"error,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta map[string]interface{} `json:"meta,omitempty"`
	// NumberOfNodes holds the value of the "number_of_nodes" field.
	NumberOfNodes int `json:"number_of_nodes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowExecutionResultQuery when eager-loading is set.
	Edges        WorkflowExecutionResultEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkflowExecutionResultEdges holds the relations/edges for other nodes in the graph.
type WorkflowExecutionResultEdges struct {
	// Workflow holds the value of the workflow edge.
	Workflow *Workflow `json:"workflow,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowExecutionResultEdges) WorkflowOrErr() (*Workflow, error) {
	if e.Workflow != nil {
		return e.Workflow, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workflow.Label}
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowExecutionResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowexecutionresult.FieldGlobalLogs, workflowexecutionresult.FieldMeta:
			values[i] = new([]byte)
		case workflowexecutionresult.FieldStartedAt, workflowexecutionresult.FieldEndedAt, workflowexecutionresult.FieldDurationMs, workflowexecutionresult.FieldNumberOfNodes:
			values[i] = new(sql.NullInt64)
		case workflowexecutionresult.FieldStatus, workflowexecutionresult.FieldError:
			values[i] = new(sql.NullString)
		case workflowexecutionresult.FieldCreateTime, workflowexecutionresult.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case workflowexecutionresult.FieldID, workflowexecutionresult.FieldWorkflowID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowExecutionResult fields.
func (wer *WorkflowExecutionResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowexecutionresult.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wer.ID = *value
			}
		case workflowexecutionresult.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				wer.CreateTime = value.Time
			}
		case workflowexecutionresult.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				wer.UpdateTime = value.Time
			}
		case workflowexecutionresult.FieldWorkflowID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_id", values[i])
			} else if value != nil {
				wer.WorkflowID = *value
			}
		case workflowexecutionresult.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wer.Status = workflowexecutionresult.Status(value.String)
			}
		case workflowexecutionresult.FieldStartedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				wer.StartedAt = value.Int64
			}
		case workflowexecutionresult.FieldEndedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[i])
			} else if value.Valid {
				wer.EndedAt = new(int64)
				*wer.EndedAt = value.Int64
			}
		case workflowexecutionresult.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				wer.DurationMs = new(int64)
				*wer.DurationMs = value.Int64
			}
		case workflowexecutionresult.FieldGlobalLogs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field global_logs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wer.GlobalLogs); err != nil {
					return fmt.Errorf("unmarshal field global_logs: %w", err)
				}
			}
		case workflowexecutionresult.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				wer.Error = new(string)
				*wer.Error = value.String
			}
		case workflowexecutionresult.FieldMeta:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wer.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		case workflowexecutionresult.FieldNumberOfNodes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_of_nodes", values[i])
			} else if value.Valid {
				wer.NumberOfNodes = int(value.Int64)
			}
		default:
			wer.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowExecutionResult.
// This includes values selected through modifiers, order, etc.
func (wer *WorkflowExecutionResult) Value(name string) (ent.Value, error) {
	return wer.selectValues.Get(name)
}

// QueryWorkflow queries the "workflow" edge of the WorkflowExecutionResult entity.
func (wer *WorkflowExecutionResult) QueryWorkflow() *WorkflowQuery {
	return NewWorkflowExecutionResultClient(wer.config).QueryWorkflow(wer)
}

// Update returns a builder for updating this WorkflowExecutionResult.
// Note that you need to call WorkflowExecutionResult.Unwrap() before calling this method if this WorkflowExecutionResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (wer *WorkflowExecutionResult) Update() *WorkflowExecutionResultUpdateOne {
	return NewWorkflowExecutionResultClient(wer.config).UpdateOne(wer)
}

// Unwrap unwraps the WorkflowExecutionResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wer *WorkflowExecutionResult) Unwrap() *WorkflowExecutionResult {
	_tx, ok := wer.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowExecutionResult is not a transactional entity")
	}
	wer.config.driver = _tx.drv
	return wer
}

// String implements the fmt.Stringer.
func (wer *WorkflowExecutionResult) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowExecutionResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wer.ID))
	builder.WriteString("create_time=")
	builder.WriteString(wer.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(wer.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("workflow_id=")
	builder.WriteString(fmt.Sprintf("%v", wer.WorkflowID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wer.Status))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(fmt.Sprintf("%v", wer.StartedAt))
	builder.WriteString(", ")
	if v := wer.EndedAt; v != nil {
		builder.WriteString("ended_at=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := wer.DurationMs; v != nil {
		builder.WriteString("duration_ms=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("global_logs=")
	builder.WriteString(fmt.Sprintf("%v", wer.GlobalLogs))
	builder.WriteString(", ")
	if v := wer.Error; v != nil {
		builder.WriteString("error=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(fmt.Sprintf("%v", wer.Meta))
	builder.WriteString(", ")
	builder.WriteString("number_of_nodes=")
	builder.WriteString(fmt.Sprintf("%v", wer.NumberOfNodes))
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowExecutionResults is a parsable slice of WorkflowExecutionResult.
type WorkflowExecutionResults []*WorkflowExecutionResult
