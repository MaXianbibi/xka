// Code generated by ent, DO NOT EDIT.

package ent

import (
	"XKA/ent/predicate"
	"XKA/ent/workflow"
	"XKA/ent/workflowexecutionresult"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeWorkflow                = "Workflow"
	TypeWorkflowExecutionResult = "WorkflowExecutionResult"
)

// WorkflowMutation represents an operation that mutates the Workflow nodes in the graph.
type WorkflowMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	create_time              *time.Time
	update_time              *time.Time
	name                     *string
	clearedFields            map[string]struct{}
	execution_results        map[uuid.UUID]struct{}
	removedexecution_results map[uuid.UUID]struct{}
	clearedexecution_results bool
	done                     bool
	oldValue                 func(context.Context) (*Workflow, error)
	predicates               []predicate.Workflow
}

var _ ent.Mutation = (*WorkflowMutation)(nil)

// workflowOption allows management of the mutation configuration using functional options.
type workflowOption func(*WorkflowMutation)

// newWorkflowMutation creates new mutation for the Workflow entity.
func newWorkflowMutation(c config, op Op, opts ...workflowOption) *WorkflowMutation {
	m := &WorkflowMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkflow,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkflowID sets the ID field of the mutation.
func withWorkflowID(id uuid.UUID) workflowOption {
	return func(m *WorkflowMutation) {
		var (
			err   error
			once  sync.Once
			value *Workflow
		)
		m.oldValue = func(ctx context.Context) (*Workflow, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Workflow.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkflow sets the old Workflow of the mutation.
func withWorkflow(node *Workflow) workflowOption {
	return func(m *WorkflowMutation) {
		m.oldValue = func(context.Context) (*Workflow, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkflowMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkflowMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Workflow entities.
func (m *WorkflowMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkflowMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkflowMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Workflow.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *WorkflowMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *WorkflowMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Workflow entity.
// If the Workflow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *WorkflowMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *WorkflowMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *WorkflowMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Workflow entity.
// If the Workflow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *WorkflowMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *WorkflowMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WorkflowMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Workflow entity.
// If the Workflow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *WorkflowMutation) ResetName() {
	m.name = nil
}

// AddExecutionResultIDs adds the "execution_results" edge to the WorkflowExecutionResult entity by ids.
func (m *WorkflowMutation) AddExecutionResultIDs(ids ...uuid.UUID) {
	if m.execution_results == nil {
		m.execution_results = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.execution_results[ids[i]] = struct{}{}
	}
}

// ClearExecutionResults clears the "execution_results" edge to the WorkflowExecutionResult entity.
func (m *WorkflowMutation) ClearExecutionResults() {
	m.clearedexecution_results = true
}

// ExecutionResultsCleared reports if the "execution_results" edge to the WorkflowExecutionResult entity was cleared.
func (m *WorkflowMutation) ExecutionResultsCleared() bool {
	return m.clearedexecution_results
}

// RemoveExecutionResultIDs removes the "execution_results" edge to the WorkflowExecutionResult entity by IDs.
func (m *WorkflowMutation) RemoveExecutionResultIDs(ids ...uuid.UUID) {
	if m.removedexecution_results == nil {
		m.removedexecution_results = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.execution_results, ids[i])
		m.removedexecution_results[ids[i]] = struct{}{}
	}
}

// RemovedExecutionResults returns the removed IDs of the "execution_results" edge to the WorkflowExecutionResult entity.
func (m *WorkflowMutation) RemovedExecutionResultsIDs() (ids []uuid.UUID) {
	for id := range m.removedexecution_results {
		ids = append(ids, id)
	}
	return
}

// ExecutionResultsIDs returns the "execution_results" edge IDs in the mutation.
func (m *WorkflowMutation) ExecutionResultsIDs() (ids []uuid.UUID) {
	for id := range m.execution_results {
		ids = append(ids, id)
	}
	return
}

// ResetExecutionResults resets all changes to the "execution_results" edge.
func (m *WorkflowMutation) ResetExecutionResults() {
	m.execution_results = nil
	m.clearedexecution_results = false
	m.removedexecution_results = nil
}

// Where appends a list predicates to the WorkflowMutation builder.
func (m *WorkflowMutation) Where(ps ...predicate.Workflow) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WorkflowMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WorkflowMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Workflow, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WorkflowMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WorkflowMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Workflow).
func (m *WorkflowMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkflowMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, workflow.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, workflow.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, workflow.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkflowMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workflow.FieldCreateTime:
		return m.CreateTime()
	case workflow.FieldUpdateTime:
		return m.UpdateTime()
	case workflow.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkflowMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workflow.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case workflow.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case workflow.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Workflow field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkflowMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workflow.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case workflow.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case workflow.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Workflow field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkflowMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkflowMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkflowMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Workflow numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkflowMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkflowMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkflowMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Workflow nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkflowMutation) ResetField(name string) error {
	switch name {
	case workflow.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case workflow.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case workflow.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Workflow field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkflowMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.execution_results != nil {
		edges = append(edges, workflow.EdgeExecutionResults)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkflowMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workflow.EdgeExecutionResults:
		ids := make([]ent.Value, 0, len(m.execution_results))
		for id := range m.execution_results {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkflowMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedexecution_results != nil {
		edges = append(edges, workflow.EdgeExecutionResults)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkflowMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case workflow.EdgeExecutionResults:
		ids := make([]ent.Value, 0, len(m.removedexecution_results))
		for id := range m.removedexecution_results {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkflowMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedexecution_results {
		edges = append(edges, workflow.EdgeExecutionResults)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkflowMutation) EdgeCleared(name string) bool {
	switch name {
	case workflow.EdgeExecutionResults:
		return m.clearedexecution_results
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkflowMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Workflow unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkflowMutation) ResetEdge(name string) error {
	switch name {
	case workflow.EdgeExecutionResults:
		m.ResetExecutionResults()
		return nil
	}
	return fmt.Errorf("unknown Workflow edge %s", name)
}

// WorkflowExecutionResultMutation represents an operation that mutates the WorkflowExecutionResult nodes in the graph.
type WorkflowExecutionResultMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	create_time        *time.Time
	update_time        *time.Time
	status             *workflowexecutionresult.Status
	started_at         *int64
	addstarted_at      *int64
	ended_at           *int64
	addended_at        *int64
	duration_ms        *int64
	addduration_ms     *int64
	global_logs        *[]string
	appendglobal_logs  []string
	error              *string
	meta               *map[string]interface{}
	number_of_nodes    *int
	addnumber_of_nodes *int
	clearedFields      map[string]struct{}
	workflow           *uuid.UUID
	clearedworkflow    bool
	done               bool
	oldValue           func(context.Context) (*WorkflowExecutionResult, error)
	predicates         []predicate.WorkflowExecutionResult
}

var _ ent.Mutation = (*WorkflowExecutionResultMutation)(nil)

// workflowexecutionresultOption allows management of the mutation configuration using functional options.
type workflowexecutionresultOption func(*WorkflowExecutionResultMutation)

// newWorkflowExecutionResultMutation creates new mutation for the WorkflowExecutionResult entity.
func newWorkflowExecutionResultMutation(c config, op Op, opts ...workflowexecutionresultOption) *WorkflowExecutionResultMutation {
	m := &WorkflowExecutionResultMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkflowExecutionResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkflowExecutionResultID sets the ID field of the mutation.
func withWorkflowExecutionResultID(id uuid.UUID) workflowexecutionresultOption {
	return func(m *WorkflowExecutionResultMutation) {
		var (
			err   error
			once  sync.Once
			value *WorkflowExecutionResult
		)
		m.oldValue = func(ctx context.Context) (*WorkflowExecutionResult, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WorkflowExecutionResult.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkflowExecutionResult sets the old WorkflowExecutionResult of the mutation.
func withWorkflowExecutionResult(node *WorkflowExecutionResult) workflowexecutionresultOption {
	return func(m *WorkflowExecutionResultMutation) {
		m.oldValue = func(context.Context) (*WorkflowExecutionResult, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkflowExecutionResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkflowExecutionResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WorkflowExecutionResult entities.
func (m *WorkflowExecutionResultMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkflowExecutionResultMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkflowExecutionResultMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WorkflowExecutionResult.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *WorkflowExecutionResultMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *WorkflowExecutionResultMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the WorkflowExecutionResult entity.
// If the WorkflowExecutionResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowExecutionResultMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *WorkflowExecutionResultMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *WorkflowExecutionResultMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *WorkflowExecutionResultMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the WorkflowExecutionResult entity.
// If the WorkflowExecutionResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowExecutionResultMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *WorkflowExecutionResultMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetWorkflowID sets the "workflow_id" field.
func (m *WorkflowExecutionResultMutation) SetWorkflowID(u uuid.UUID) {
	m.workflow = &u
}

// WorkflowID returns the value of the "workflow_id" field in the mutation.
func (m *WorkflowExecutionResultMutation) WorkflowID() (r uuid.UUID, exists bool) {
	v := m.workflow
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkflowID returns the old "workflow_id" field's value of the WorkflowExecutionResult entity.
// If the WorkflowExecutionResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowExecutionResultMutation) OldWorkflowID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkflowID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkflowID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkflowID: %w", err)
	}
	return oldValue.WorkflowID, nil
}

// ResetWorkflowID resets all changes to the "workflow_id" field.
func (m *WorkflowExecutionResultMutation) ResetWorkflowID() {
	m.workflow = nil
}

// SetStatus sets the "status" field.
func (m *WorkflowExecutionResultMutation) SetStatus(w workflowexecutionresult.Status) {
	m.status = &w
}

// Status returns the value of the "status" field in the mutation.
func (m *WorkflowExecutionResultMutation) Status() (r workflowexecutionresult.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the WorkflowExecutionResult entity.
// If the WorkflowExecutionResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowExecutionResultMutation) OldStatus(ctx context.Context) (v workflowexecutionresult.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *WorkflowExecutionResultMutation) ResetStatus() {
	m.status = nil
}

// SetStartedAt sets the "started_at" field.
func (m *WorkflowExecutionResultMutation) SetStartedAt(i int64) {
	m.started_at = &i
	m.addstarted_at = nil
}

// StartedAt returns the value of the "started_at" field in the mutation.
func (m *WorkflowExecutionResultMutation) StartedAt() (r int64, exists bool) {
	v := m.started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old "started_at" field's value of the WorkflowExecutionResult entity.
// If the WorkflowExecutionResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowExecutionResultMutation) OldStartedAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// AddStartedAt adds i to the "started_at" field.
func (m *WorkflowExecutionResultMutation) AddStartedAt(i int64) {
	if m.addstarted_at != nil {
		*m.addstarted_at += i
	} else {
		m.addstarted_at = &i
	}
}

// AddedStartedAt returns the value that was added to the "started_at" field in this mutation.
func (m *WorkflowExecutionResultMutation) AddedStartedAt() (r int64, exists bool) {
	v := m.addstarted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartedAt resets all changes to the "started_at" field.
func (m *WorkflowExecutionResultMutation) ResetStartedAt() {
	m.started_at = nil
	m.addstarted_at = nil
}

// SetEndedAt sets the "ended_at" field.
func (m *WorkflowExecutionResultMutation) SetEndedAt(i int64) {
	m.ended_at = &i
	m.addended_at = nil
}

// EndedAt returns the value of the "ended_at" field in the mutation.
func (m *WorkflowExecutionResultMutation) EndedAt() (r int64, exists bool) {
	v := m.ended_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndedAt returns the old "ended_at" field's value of the WorkflowExecutionResult entity.
// If the WorkflowExecutionResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowExecutionResultMutation) OldEndedAt(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndedAt: %w", err)
	}
	return oldValue.EndedAt, nil
}

// AddEndedAt adds i to the "ended_at" field.
func (m *WorkflowExecutionResultMutation) AddEndedAt(i int64) {
	if m.addended_at != nil {
		*m.addended_at += i
	} else {
		m.addended_at = &i
	}
}

// AddedEndedAt returns the value that was added to the "ended_at" field in this mutation.
func (m *WorkflowExecutionResultMutation) AddedEndedAt() (r int64, exists bool) {
	v := m.addended_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndedAt clears the value of the "ended_at" field.
func (m *WorkflowExecutionResultMutation) ClearEndedAt() {
	m.ended_at = nil
	m.addended_at = nil
	m.clearedFields[workflowexecutionresult.FieldEndedAt] = struct{}{}
}

// EndedAtCleared returns if the "ended_at" field was cleared in this mutation.
func (m *WorkflowExecutionResultMutation) EndedAtCleared() bool {
	_, ok := m.clearedFields[workflowexecutionresult.FieldEndedAt]
	return ok
}

// ResetEndedAt resets all changes to the "ended_at" field.
func (m *WorkflowExecutionResultMutation) ResetEndedAt() {
	m.ended_at = nil
	m.addended_at = nil
	delete(m.clearedFields, workflowexecutionresult.FieldEndedAt)
}

// SetDurationMs sets the "duration_ms" field.
func (m *WorkflowExecutionResultMutation) SetDurationMs(i int64) {
	m.duration_ms = &i
	m.addduration_ms = nil
}

// DurationMs returns the value of the "duration_ms" field in the mutation.
func (m *WorkflowExecutionResultMutation) DurationMs() (r int64, exists bool) {
	v := m.duration_ms
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationMs returns the old "duration_ms" field's value of the WorkflowExecutionResult entity.
// If the WorkflowExecutionResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowExecutionResultMutation) OldDurationMs(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationMs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationMs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationMs: %w", err)
	}
	return oldValue.DurationMs, nil
}

// AddDurationMs adds i to the "duration_ms" field.
func (m *WorkflowExecutionResultMutation) AddDurationMs(i int64) {
	if m.addduration_ms != nil {
		*m.addduration_ms += i
	} else {
		m.addduration_ms = &i
	}
}

// AddedDurationMs returns the value that was added to the "duration_ms" field in this mutation.
func (m *WorkflowExecutionResultMutation) AddedDurationMs() (r int64, exists bool) {
	v := m.addduration_ms
	if v == nil {
		return
	}
	return *v, true
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (m *WorkflowExecutionResultMutation) ClearDurationMs() {
	m.duration_ms = nil
	m.addduration_ms = nil
	m.clearedFields[workflowexecutionresult.FieldDurationMs] = struct{}{}
}

// DurationMsCleared returns if the "duration_ms" field was cleared in this mutation.
func (m *WorkflowExecutionResultMutation) DurationMsCleared() bool {
	_, ok := m.clearedFields[workflowexecutionresult.FieldDurationMs]
	return ok
}

// ResetDurationMs resets all changes to the "duration_ms" field.
func (m *WorkflowExecutionResultMutation) ResetDurationMs() {
	m.duration_ms = nil
	m.addduration_ms = nil
	delete(m.clearedFields, workflowexecutionresult.FieldDurationMs)
}

// SetGlobalLogs sets the "global_logs" field.
func (m *WorkflowExecutionResultMutation) SetGlobalLogs(s []string) {
	m.global_logs = &s
	m.appendglobal_logs = nil
}

// GlobalLogs returns the value of the "global_logs" field in the mutation.
func (m *WorkflowExecutionResultMutation) GlobalLogs() (r []string, exists bool) {
	v := m.global_logs
	if v == nil {
		return
	}
	return *v, true
}

// OldGlobalLogs returns the old "global_logs" field's value of the WorkflowExecutionResult entity.
// If the WorkflowExecutionResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowExecutionResultMutation) OldGlobalLogs(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGlobalLogs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGlobalLogs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGlobalLogs: %w", err)
	}
	return oldValue.GlobalLogs, nil
}

// AppendGlobalLogs adds s to the "global_logs" field.
func (m *WorkflowExecutionResultMutation) AppendGlobalLogs(s []string) {
	m.appendglobal_logs = append(m.appendglobal_logs, s...)
}

// AppendedGlobalLogs returns the list of values that were appended to the "global_logs" field in this mutation.
func (m *WorkflowExecutionResultMutation) AppendedGlobalLogs() ([]string, bool) {
	if len(m.appendglobal_logs) == 0 {
		return nil, false
	}
	return m.appendglobal_logs, true
}

// ClearGlobalLogs clears the value of the "global_logs" field.
func (m *WorkflowExecutionResultMutation) ClearGlobalLogs() {
	m.global_logs = nil
	m.appendglobal_logs = nil
	m.clearedFields[workflowexecutionresult.FieldGlobalLogs] = struct{}{}
}

// GlobalLogsCleared returns if the "global_logs" field was cleared in this mutation.
func (m *WorkflowExecutionResultMutation) GlobalLogsCleared() bool {
	_, ok := m.clearedFields[workflowexecutionresult.FieldGlobalLogs]
	return ok
}

// ResetGlobalLogs resets all changes to the "global_logs" field.
func (m *WorkflowExecutionResultMutation) ResetGlobalLogs() {
	m.global_logs = nil
	m.appendglobal_logs = nil
	delete(m.clearedFields, workflowexecutionresult.FieldGlobalLogs)
}

// SetError sets the "error" field.
func (m *WorkflowExecutionResultMutation) SetError(s string) {
	m.error = &s
}

// Error returns the value of the "error" field in the mutation.
func (m *WorkflowExecutionResultMutation) Error() (r string, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old "error" field's value of the WorkflowExecutionResult entity.
// If the WorkflowExecutionResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowExecutionResultMutation) OldError(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ClearError clears the value of the "error" field.
func (m *WorkflowExecutionResultMutation) ClearError() {
	m.error = nil
	m.clearedFields[workflowexecutionresult.FieldError] = struct{}{}
}

// ErrorCleared returns if the "error" field was cleared in this mutation.
func (m *WorkflowExecutionResultMutation) ErrorCleared() bool {
	_, ok := m.clearedFields[workflowexecutionresult.FieldError]
	return ok
}

// ResetError resets all changes to the "error" field.
func (m *WorkflowExecutionResultMutation) ResetError() {
	m.error = nil
	delete(m.clearedFields, workflowexecutionresult.FieldError)
}

// SetMeta sets the "meta" field.
func (m *WorkflowExecutionResultMutation) SetMeta(value map[string]interface{}) {
	m.meta = &value
}

// Meta returns the value of the "meta" field in the mutation.
func (m *WorkflowExecutionResultMutation) Meta() (r map[string]interface{}, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the WorkflowExecutionResult entity.
// If the WorkflowExecutionResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowExecutionResultMutation) OldMeta(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ClearMeta clears the value of the "meta" field.
func (m *WorkflowExecutionResultMutation) ClearMeta() {
	m.meta = nil
	m.clearedFields[workflowexecutionresult.FieldMeta] = struct{}{}
}

// MetaCleared returns if the "meta" field was cleared in this mutation.
func (m *WorkflowExecutionResultMutation) MetaCleared() bool {
	_, ok := m.clearedFields[workflowexecutionresult.FieldMeta]
	return ok
}

// ResetMeta resets all changes to the "meta" field.
func (m *WorkflowExecutionResultMutation) ResetMeta() {
	m.meta = nil
	delete(m.clearedFields, workflowexecutionresult.FieldMeta)
}

// SetNumberOfNodes sets the "number_of_nodes" field.
func (m *WorkflowExecutionResultMutation) SetNumberOfNodes(i int) {
	m.number_of_nodes = &i
	m.addnumber_of_nodes = nil
}

// NumberOfNodes returns the value of the "number_of_nodes" field in the mutation.
func (m *WorkflowExecutionResultMutation) NumberOfNodes() (r int, exists bool) {
	v := m.number_of_nodes
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberOfNodes returns the old "number_of_nodes" field's value of the WorkflowExecutionResult entity.
// If the WorkflowExecutionResult object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkflowExecutionResultMutation) OldNumberOfNodes(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberOfNodes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberOfNodes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberOfNodes: %w", err)
	}
	return oldValue.NumberOfNodes, nil
}

// AddNumberOfNodes adds i to the "number_of_nodes" field.
func (m *WorkflowExecutionResultMutation) AddNumberOfNodes(i int) {
	if m.addnumber_of_nodes != nil {
		*m.addnumber_of_nodes += i
	} else {
		m.addnumber_of_nodes = &i
	}
}

// AddedNumberOfNodes returns the value that was added to the "number_of_nodes" field in this mutation.
func (m *WorkflowExecutionResultMutation) AddedNumberOfNodes() (r int, exists bool) {
	v := m.addnumber_of_nodes
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberOfNodes resets all changes to the "number_of_nodes" field.
func (m *WorkflowExecutionResultMutation) ResetNumberOfNodes() {
	m.number_of_nodes = nil
	m.addnumber_of_nodes = nil
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (m *WorkflowExecutionResultMutation) ClearWorkflow() {
	m.clearedworkflow = true
	m.clearedFields[workflowexecutionresult.FieldWorkflowID] = struct{}{}
}

// WorkflowCleared reports if the "workflow" edge to the Workflow entity was cleared.
func (m *WorkflowExecutionResultMutation) WorkflowCleared() bool {
	return m.clearedworkflow
}

// WorkflowIDs returns the "workflow" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkflowID instead. It exists only for internal usage by the builders.
func (m *WorkflowExecutionResultMutation) WorkflowIDs() (ids []uuid.UUID) {
	if id := m.workflow; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkflow resets all changes to the "workflow" edge.
func (m *WorkflowExecutionResultMutation) ResetWorkflow() {
	m.workflow = nil
	m.clearedworkflow = false
}

// Where appends a list predicates to the WorkflowExecutionResultMutation builder.
func (m *WorkflowExecutionResultMutation) Where(ps ...predicate.WorkflowExecutionResult) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WorkflowExecutionResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WorkflowExecutionResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WorkflowExecutionResult, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WorkflowExecutionResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WorkflowExecutionResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WorkflowExecutionResult).
func (m *WorkflowExecutionResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkflowExecutionResultMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.create_time != nil {
		fields = append(fields, workflowexecutionresult.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, workflowexecutionresult.FieldUpdateTime)
	}
	if m.workflow != nil {
		fields = append(fields, workflowexecutionresult.FieldWorkflowID)
	}
	if m.status != nil {
		fields = append(fields, workflowexecutionresult.FieldStatus)
	}
	if m.started_at != nil {
		fields = append(fields, workflowexecutionresult.FieldStartedAt)
	}
	if m.ended_at != nil {
		fields = append(fields, workflowexecutionresult.FieldEndedAt)
	}
	if m.duration_ms != nil {
		fields = append(fields, workflowexecutionresult.FieldDurationMs)
	}
	if m.global_logs != nil {
		fields = append(fields, workflowexecutionresult.FieldGlobalLogs)
	}
	if m.error != nil {
		fields = append(fields, workflowexecutionresult.FieldError)
	}
	if m.meta != nil {
		fields = append(fields, workflowexecutionresult.FieldMeta)
	}
	if m.number_of_nodes != nil {
		fields = append(fields, workflowexecutionresult.FieldNumberOfNodes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkflowExecutionResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workflowexecutionresult.FieldCreateTime:
		return m.CreateTime()
	case workflowexecutionresult.FieldUpdateTime:
		return m.UpdateTime()
	case workflowexecutionresult.FieldWorkflowID:
		return m.WorkflowID()
	case workflowexecutionresult.FieldStatus:
		return m.Status()
	case workflowexecutionresult.FieldStartedAt:
		return m.StartedAt()
	case workflowexecutionresult.FieldEndedAt:
		return m.EndedAt()
	case workflowexecutionresult.FieldDurationMs:
		return m.DurationMs()
	case workflowexecutionresult.FieldGlobalLogs:
		return m.GlobalLogs()
	case workflowexecutionresult.FieldError:
		return m.Error()
	case workflowexecutionresult.FieldMeta:
		return m.Meta()
	case workflowexecutionresult.FieldNumberOfNodes:
		return m.NumberOfNodes()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkflowExecutionResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workflowexecutionresult.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case workflowexecutionresult.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case workflowexecutionresult.FieldWorkflowID:
		return m.OldWorkflowID(ctx)
	case workflowexecutionresult.FieldStatus:
		return m.OldStatus(ctx)
	case workflowexecutionresult.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case workflowexecutionresult.FieldEndedAt:
		return m.OldEndedAt(ctx)
	case workflowexecutionresult.FieldDurationMs:
		return m.OldDurationMs(ctx)
	case workflowexecutionresult.FieldGlobalLogs:
		return m.OldGlobalLogs(ctx)
	case workflowexecutionresult.FieldError:
		return m.OldError(ctx)
	case workflowexecutionresult.FieldMeta:
		return m.OldMeta(ctx)
	case workflowexecutionresult.FieldNumberOfNodes:
		return m.OldNumberOfNodes(ctx)
	}
	return nil, fmt.Errorf("unknown WorkflowExecutionResult field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkflowExecutionResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workflowexecutionresult.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case workflowexecutionresult.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case workflowexecutionresult.FieldWorkflowID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkflowID(v)
		return nil
	case workflowexecutionresult.FieldStatus:
		v, ok := value.(workflowexecutionresult.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case workflowexecutionresult.FieldStartedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case workflowexecutionresult.FieldEndedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndedAt(v)
		return nil
	case workflowexecutionresult.FieldDurationMs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationMs(v)
		return nil
	case workflowexecutionresult.FieldGlobalLogs:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGlobalLogs(v)
		return nil
	case workflowexecutionresult.FieldError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	case workflowexecutionresult.FieldMeta:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	case workflowexecutionresult.FieldNumberOfNodes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberOfNodes(v)
		return nil
	}
	return fmt.Errorf("unknown WorkflowExecutionResult field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkflowExecutionResultMutation) AddedFields() []string {
	var fields []string
	if m.addstarted_at != nil {
		fields = append(fields, workflowexecutionresult.FieldStartedAt)
	}
	if m.addended_at != nil {
		fields = append(fields, workflowexecutionresult.FieldEndedAt)
	}
	if m.addduration_ms != nil {
		fields = append(fields, workflowexecutionresult.FieldDurationMs)
	}
	if m.addnumber_of_nodes != nil {
		fields = append(fields, workflowexecutionresult.FieldNumberOfNodes)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkflowExecutionResultMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case workflowexecutionresult.FieldStartedAt:
		return m.AddedStartedAt()
	case workflowexecutionresult.FieldEndedAt:
		return m.AddedEndedAt()
	case workflowexecutionresult.FieldDurationMs:
		return m.AddedDurationMs()
	case workflowexecutionresult.FieldNumberOfNodes:
		return m.AddedNumberOfNodes()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkflowExecutionResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	case workflowexecutionresult.FieldStartedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartedAt(v)
		return nil
	case workflowexecutionresult.FieldEndedAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndedAt(v)
		return nil
	case workflowexecutionresult.FieldDurationMs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationMs(v)
		return nil
	case workflowexecutionresult.FieldNumberOfNodes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberOfNodes(v)
		return nil
	}
	return fmt.Errorf("unknown WorkflowExecutionResult numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkflowExecutionResultMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(workflowexecutionresult.FieldEndedAt) {
		fields = append(fields, workflowexecutionresult.FieldEndedAt)
	}
	if m.FieldCleared(workflowexecutionresult.FieldDurationMs) {
		fields = append(fields, workflowexecutionresult.FieldDurationMs)
	}
	if m.FieldCleared(workflowexecutionresult.FieldGlobalLogs) {
		fields = append(fields, workflowexecutionresult.FieldGlobalLogs)
	}
	if m.FieldCleared(workflowexecutionresult.FieldError) {
		fields = append(fields, workflowexecutionresult.FieldError)
	}
	if m.FieldCleared(workflowexecutionresult.FieldMeta) {
		fields = append(fields, workflowexecutionresult.FieldMeta)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkflowExecutionResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkflowExecutionResultMutation) ClearField(name string) error {
	switch name {
	case workflowexecutionresult.FieldEndedAt:
		m.ClearEndedAt()
		return nil
	case workflowexecutionresult.FieldDurationMs:
		m.ClearDurationMs()
		return nil
	case workflowexecutionresult.FieldGlobalLogs:
		m.ClearGlobalLogs()
		return nil
	case workflowexecutionresult.FieldError:
		m.ClearError()
		return nil
	case workflowexecutionresult.FieldMeta:
		m.ClearMeta()
		return nil
	}
	return fmt.Errorf("unknown WorkflowExecutionResult nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkflowExecutionResultMutation) ResetField(name string) error {
	switch name {
	case workflowexecutionresult.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case workflowexecutionresult.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case workflowexecutionresult.FieldWorkflowID:
		m.ResetWorkflowID()
		return nil
	case workflowexecutionresult.FieldStatus:
		m.ResetStatus()
		return nil
	case workflowexecutionresult.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case workflowexecutionresult.FieldEndedAt:
		m.ResetEndedAt()
		return nil
	case workflowexecutionresult.FieldDurationMs:
		m.ResetDurationMs()
		return nil
	case workflowexecutionresult.FieldGlobalLogs:
		m.ResetGlobalLogs()
		return nil
	case workflowexecutionresult.FieldError:
		m.ResetError()
		return nil
	case workflowexecutionresult.FieldMeta:
		m.ResetMeta()
		return nil
	case workflowexecutionresult.FieldNumberOfNodes:
		m.ResetNumberOfNodes()
		return nil
	}
	return fmt.Errorf("unknown WorkflowExecutionResult field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkflowExecutionResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.workflow != nil {
		edges = append(edges, workflowexecutionresult.EdgeWorkflow)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkflowExecutionResultMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workflowexecutionresult.EdgeWorkflow:
		if id := m.workflow; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkflowExecutionResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkflowExecutionResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkflowExecutionResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedworkflow {
		edges = append(edges, workflowexecutionresult.EdgeWorkflow)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkflowExecutionResultMutation) EdgeCleared(name string) bool {
	switch name {
	case workflowexecutionresult.EdgeWorkflow:
		return m.clearedworkflow
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkflowExecutionResultMutation) ClearEdge(name string) error {
	switch name {
	case workflowexecutionresult.EdgeWorkflow:
		m.ClearWorkflow()
		return nil
	}
	return fmt.Errorf("unknown WorkflowExecutionResult unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkflowExecutionResultMutation) ResetEdge(name string) error {
	switch name {
	case workflowexecutionresult.EdgeWorkflow:
		m.ResetWorkflow()
		return nil
	}
	return fmt.Errorf("unknown WorkflowExecutionResult edge %s", name)
}
