// Code generated by ent, DO NOT EDIT.

package ent

import (
	"XKA/ent/workflow"
	"XKA/ent/workflowexecutionresult"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkflowExecutionResultCreate is the builder for creating a WorkflowExecutionResult entity.
type WorkflowExecutionResultCreate struct {
	config
	mutation *WorkflowExecutionResultMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (werc *WorkflowExecutionResultCreate) SetCreateTime(t time.Time) *WorkflowExecutionResultCreate {
	werc.mutation.SetCreateTime(t)
	return werc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (werc *WorkflowExecutionResultCreate) SetNillableCreateTime(t *time.Time) *WorkflowExecutionResultCreate {
	if t != nil {
		werc.SetCreateTime(*t)
	}
	return werc
}

// SetUpdateTime sets the "update_time" field.
func (werc *WorkflowExecutionResultCreate) SetUpdateTime(t time.Time) *WorkflowExecutionResultCreate {
	werc.mutation.SetUpdateTime(t)
	return werc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (werc *WorkflowExecutionResultCreate) SetNillableUpdateTime(t *time.Time) *WorkflowExecutionResultCreate {
	if t != nil {
		werc.SetUpdateTime(*t)
	}
	return werc
}

// SetWorkflowID sets the "workflow_id" field.
func (werc *WorkflowExecutionResultCreate) SetWorkflowID(u uuid.UUID) *WorkflowExecutionResultCreate {
	werc.mutation.SetWorkflowID(u)
	return werc
}

// SetStatus sets the "status" field.
func (werc *WorkflowExecutionResultCreate) SetStatus(w workflowexecutionresult.Status) *WorkflowExecutionResultCreate {
	werc.mutation.SetStatus(w)
	return werc
}

// SetStartedAt sets the "started_at" field.
func (werc *WorkflowExecutionResultCreate) SetStartedAt(i int64) *WorkflowExecutionResultCreate {
	werc.mutation.SetStartedAt(i)
	return werc
}

// SetEndedAt sets the "ended_at" field.
func (werc *WorkflowExecutionResultCreate) SetEndedAt(i int64) *WorkflowExecutionResultCreate {
	werc.mutation.SetEndedAt(i)
	return werc
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (werc *WorkflowExecutionResultCreate) SetNillableEndedAt(i *int64) *WorkflowExecutionResultCreate {
	if i != nil {
		werc.SetEndedAt(*i)
	}
	return werc
}

// SetDurationMs sets the "duration_ms" field.
func (werc *WorkflowExecutionResultCreate) SetDurationMs(i int64) *WorkflowExecutionResultCreate {
	werc.mutation.SetDurationMs(i)
	return werc
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (werc *WorkflowExecutionResultCreate) SetNillableDurationMs(i *int64) *WorkflowExecutionResultCreate {
	if i != nil {
		werc.SetDurationMs(*i)
	}
	return werc
}

// SetGlobalLogs sets the "global_logs" field.
func (werc *WorkflowExecutionResultCreate) SetGlobalLogs(s []string) *WorkflowExecutionResultCreate {
	werc.mutation.SetGlobalLogs(s)
	return werc
}

// SetError sets the "error" field.
func (werc *WorkflowExecutionResultCreate) SetError(s string) *WorkflowExecutionResultCreate {
	werc.mutation.SetError(s)
	return werc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (werc *WorkflowExecutionResultCreate) SetNillableError(s *string) *WorkflowExecutionResultCreate {
	if s != nil {
		werc.SetError(*s)
	}
	return werc
}

// SetMeta sets the "meta" field.
func (werc *WorkflowExecutionResultCreate) SetMeta(m map[string]interface{}) *WorkflowExecutionResultCreate {
	werc.mutation.SetMeta(m)
	return werc
}

// SetNumberOfNodes sets the "number_of_nodes" field.
func (werc *WorkflowExecutionResultCreate) SetNumberOfNodes(i int) *WorkflowExecutionResultCreate {
	werc.mutation.SetNumberOfNodes(i)
	return werc
}

// SetNillableNumberOfNodes sets the "number_of_nodes" field if the given value is not nil.
func (werc *WorkflowExecutionResultCreate) SetNillableNumberOfNodes(i *int) *WorkflowExecutionResultCreate {
	if i != nil {
		werc.SetNumberOfNodes(*i)
	}
	return werc
}

// SetID sets the "id" field.
func (werc *WorkflowExecutionResultCreate) SetID(u uuid.UUID) *WorkflowExecutionResultCreate {
	werc.mutation.SetID(u)
	return werc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (werc *WorkflowExecutionResultCreate) SetNillableID(u *uuid.UUID) *WorkflowExecutionResultCreate {
	if u != nil {
		werc.SetID(*u)
	}
	return werc
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (werc *WorkflowExecutionResultCreate) SetWorkflow(w *Workflow) *WorkflowExecutionResultCreate {
	return werc.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowExecutionResultMutation object of the builder.
func (werc *WorkflowExecutionResultCreate) Mutation() *WorkflowExecutionResultMutation {
	return werc.mutation
}

// Save creates the WorkflowExecutionResult in the database.
func (werc *WorkflowExecutionResultCreate) Save(ctx context.Context) (*WorkflowExecutionResult, error) {
	werc.defaults()
	return withHooks(ctx, werc.sqlSave, werc.mutation, werc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (werc *WorkflowExecutionResultCreate) SaveX(ctx context.Context) *WorkflowExecutionResult {
	v, err := werc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (werc *WorkflowExecutionResultCreate) Exec(ctx context.Context) error {
	_, err := werc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (werc *WorkflowExecutionResultCreate) ExecX(ctx context.Context) {
	if err := werc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (werc *WorkflowExecutionResultCreate) defaults() {
	if _, ok := werc.mutation.CreateTime(); !ok {
		v := workflowexecutionresult.DefaultCreateTime()
		werc.mutation.SetCreateTime(v)
	}
	if _, ok := werc.mutation.UpdateTime(); !ok {
		v := workflowexecutionresult.DefaultUpdateTime()
		werc.mutation.SetUpdateTime(v)
	}
	if _, ok := werc.mutation.NumberOfNodes(); !ok {
		v := workflowexecutionresult.DefaultNumberOfNodes
		werc.mutation.SetNumberOfNodes(v)
	}
	if _, ok := werc.mutation.ID(); !ok {
		v := workflowexecutionresult.DefaultID()
		werc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (werc *WorkflowExecutionResultCreate) check() error {
	if _, ok := werc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "WorkflowExecutionResult.create_time"`)}
	}
	if _, ok := werc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "WorkflowExecutionResult.update_time"`)}
	}
	if _, ok := werc.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow_id", err: errors.New(`ent: missing required field "WorkflowExecutionResult.workflow_id"`)}
	}
	if _, ok := werc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WorkflowExecutionResult.status"`)}
	}
	if v, ok := werc.mutation.Status(); ok {
		if err := workflowexecutionresult.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecutionResult.status": %w`, err)}
		}
	}
	if _, ok := werc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "WorkflowExecutionResult.started_at"`)}
	}
	if _, ok := werc.mutation.NumberOfNodes(); !ok {
		return &ValidationError{Name: "number_of_nodes", err: errors.New(`ent: missing required field "WorkflowExecutionResult.number_of_nodes"`)}
	}
	if len(werc.mutation.WorkflowIDs()) == 0 {
		return &ValidationError{Name: "workflow", err: errors.New(`ent: missing required edge "WorkflowExecutionResult.workflow"`)}
	}
	return nil
}

func (werc *WorkflowExecutionResultCreate) sqlSave(ctx context.Context) (*WorkflowExecutionResult, error) {
	if err := werc.check(); err != nil {
		return nil, err
	}
	_node, _spec := werc.createSpec()
	if err := sqlgraph.CreateNode(ctx, werc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	werc.mutation.id = &_node.ID
	werc.mutation.done = true
	return _node, nil
}

func (werc *WorkflowExecutionResultCreate) createSpec() (*WorkflowExecutionResult, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowExecutionResult{config: werc.config}
		_spec = sqlgraph.NewCreateSpec(workflowexecutionresult.Table, sqlgraph.NewFieldSpec(workflowexecutionresult.FieldID, field.TypeUUID))
	)
	if id, ok := werc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := werc.mutation.CreateTime(); ok {
		_spec.SetField(workflowexecutionresult.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := werc.mutation.UpdateTime(); ok {
		_spec.SetField(workflowexecutionresult.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := werc.mutation.Status(); ok {
		_spec.SetField(workflowexecutionresult.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := werc.mutation.StartedAt(); ok {
		_spec.SetField(workflowexecutionresult.FieldStartedAt, field.TypeInt64, value)
		_node.StartedAt = value
	}
	if value, ok := werc.mutation.EndedAt(); ok {
		_spec.SetField(workflowexecutionresult.FieldEndedAt, field.TypeInt64, value)
		_node.EndedAt = &value
	}
	if value, ok := werc.mutation.DurationMs(); ok {
		_spec.SetField(workflowexecutionresult.FieldDurationMs, field.TypeInt64, value)
		_node.DurationMs = &value
	}
	if value, ok := werc.mutation.GlobalLogs(); ok {
		_spec.SetField(workflowexecutionresult.FieldGlobalLogs, field.TypeJSON, value)
		_node.GlobalLogs = value
	}
	if value, ok := werc.mutation.Error(); ok {
		_spec.SetField(workflowexecutionresult.FieldError, field.TypeString, value)
		_node.Error = &value
	}
	if value, ok := werc.mutation.Meta(); ok {
		_spec.SetField(workflowexecutionresult.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	if value, ok := werc.mutation.NumberOfNodes(); ok {
		_spec.SetField(workflowexecutionresult.FieldNumberOfNodes, field.TypeInt, value)
		_node.NumberOfNodes = value
	}
	if nodes := werc.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecutionresult.WorkflowTable,
			Columns: []string{workflowexecutionresult.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowExecutionResultCreateBulk is the builder for creating many WorkflowExecutionResult entities in bulk.
type WorkflowExecutionResultCreateBulk struct {
	config
	err      error
	builders []*WorkflowExecutionResultCreate
}

// Save creates the WorkflowExecutionResult entities in the database.
func (wercb *WorkflowExecutionResultCreateBulk) Save(ctx context.Context) ([]*WorkflowExecutionResult, error) {
	if wercb.err != nil {
		return nil, wercb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wercb.builders))
	nodes := make([]*WorkflowExecutionResult, len(wercb.builders))
	mutators := make([]Mutator, len(wercb.builders))
	for i := range wercb.builders {
		func(i int, root context.Context) {
			builder := wercb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowExecutionResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wercb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wercb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wercb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wercb *WorkflowExecutionResultCreateBulk) SaveX(ctx context.Context) []*WorkflowExecutionResult {
	v, err := wercb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wercb *WorkflowExecutionResultCreateBulk) Exec(ctx context.Context) error {
	_, err := wercb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wercb *WorkflowExecutionResultCreateBulk) ExecX(ctx context.Context) {
	if err := wercb.Exec(ctx); err != nil {
		panic(err)
	}
}
