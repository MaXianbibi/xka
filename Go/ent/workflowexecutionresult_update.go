// Code generated by ent, DO NOT EDIT.

package ent

import (
	"XKA/ent/predicate"
	"XKA/ent/workflow"
	"XKA/ent/workflowexecutionresult"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkflowExecutionResultUpdate is the builder for updating WorkflowExecutionResult entities.
type WorkflowExecutionResultUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowExecutionResultMutation
}

// Where appends a list predicates to the WorkflowExecutionResultUpdate builder.
func (weru *WorkflowExecutionResultUpdate) Where(ps ...predicate.WorkflowExecutionResult) *WorkflowExecutionResultUpdate {
	weru.mutation.Where(ps...)
	return weru
}

// SetUpdateTime sets the "update_time" field.
func (weru *WorkflowExecutionResultUpdate) SetUpdateTime(t time.Time) *WorkflowExecutionResultUpdate {
	weru.mutation.SetUpdateTime(t)
	return weru
}

// SetWorkflowID sets the "workflow_id" field.
func (weru *WorkflowExecutionResultUpdate) SetWorkflowID(u uuid.UUID) *WorkflowExecutionResultUpdate {
	weru.mutation.SetWorkflowID(u)
	return weru
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (weru *WorkflowExecutionResultUpdate) SetNillableWorkflowID(u *uuid.UUID) *WorkflowExecutionResultUpdate {
	if u != nil {
		weru.SetWorkflowID(*u)
	}
	return weru
}

// SetStatus sets the "status" field.
func (weru *WorkflowExecutionResultUpdate) SetStatus(w workflowexecutionresult.Status) *WorkflowExecutionResultUpdate {
	weru.mutation.SetStatus(w)
	return weru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (weru *WorkflowExecutionResultUpdate) SetNillableStatus(w *workflowexecutionresult.Status) *WorkflowExecutionResultUpdate {
	if w != nil {
		weru.SetStatus(*w)
	}
	return weru
}

// SetStartedAt sets the "started_at" field.
func (weru *WorkflowExecutionResultUpdate) SetStartedAt(i int64) *WorkflowExecutionResultUpdate {
	weru.mutation.ResetStartedAt()
	weru.mutation.SetStartedAt(i)
	return weru
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (weru *WorkflowExecutionResultUpdate) SetNillableStartedAt(i *int64) *WorkflowExecutionResultUpdate {
	if i != nil {
		weru.SetStartedAt(*i)
	}
	return weru
}

// AddStartedAt adds i to the "started_at" field.
func (weru *WorkflowExecutionResultUpdate) AddStartedAt(i int64) *WorkflowExecutionResultUpdate {
	weru.mutation.AddStartedAt(i)
	return weru
}

// SetEndedAt sets the "ended_at" field.
func (weru *WorkflowExecutionResultUpdate) SetEndedAt(i int64) *WorkflowExecutionResultUpdate {
	weru.mutation.ResetEndedAt()
	weru.mutation.SetEndedAt(i)
	return weru
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (weru *WorkflowExecutionResultUpdate) SetNillableEndedAt(i *int64) *WorkflowExecutionResultUpdate {
	if i != nil {
		weru.SetEndedAt(*i)
	}
	return weru
}

// AddEndedAt adds i to the "ended_at" field.
func (weru *WorkflowExecutionResultUpdate) AddEndedAt(i int64) *WorkflowExecutionResultUpdate {
	weru.mutation.AddEndedAt(i)
	return weru
}

// ClearEndedAt clears the value of the "ended_at" field.
func (weru *WorkflowExecutionResultUpdate) ClearEndedAt() *WorkflowExecutionResultUpdate {
	weru.mutation.ClearEndedAt()
	return weru
}

// SetDurationMs sets the "duration_ms" field.
func (weru *WorkflowExecutionResultUpdate) SetDurationMs(i int64) *WorkflowExecutionResultUpdate {
	weru.mutation.ResetDurationMs()
	weru.mutation.SetDurationMs(i)
	return weru
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (weru *WorkflowExecutionResultUpdate) SetNillableDurationMs(i *int64) *WorkflowExecutionResultUpdate {
	if i != nil {
		weru.SetDurationMs(*i)
	}
	return weru
}

// AddDurationMs adds i to the "duration_ms" field.
func (weru *WorkflowExecutionResultUpdate) AddDurationMs(i int64) *WorkflowExecutionResultUpdate {
	weru.mutation.AddDurationMs(i)
	return weru
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (weru *WorkflowExecutionResultUpdate) ClearDurationMs() *WorkflowExecutionResultUpdate {
	weru.mutation.ClearDurationMs()
	return weru
}

// SetGlobalLogs sets the "global_logs" field.
func (weru *WorkflowExecutionResultUpdate) SetGlobalLogs(s []string) *WorkflowExecutionResultUpdate {
	weru.mutation.SetGlobalLogs(s)
	return weru
}

// AppendGlobalLogs appends s to the "global_logs" field.
func (weru *WorkflowExecutionResultUpdate) AppendGlobalLogs(s []string) *WorkflowExecutionResultUpdate {
	weru.mutation.AppendGlobalLogs(s)
	return weru
}

// ClearGlobalLogs clears the value of the "global_logs" field.
func (weru *WorkflowExecutionResultUpdate) ClearGlobalLogs() *WorkflowExecutionResultUpdate {
	weru.mutation.ClearGlobalLogs()
	return weru
}

// SetError sets the "error" field.
func (weru *WorkflowExecutionResultUpdate) SetError(s string) *WorkflowExecutionResultUpdate {
	weru.mutation.SetError(s)
	return weru
}

// SetNillableError sets the "error" field if the given value is not nil.
func (weru *WorkflowExecutionResultUpdate) SetNillableError(s *string) *WorkflowExecutionResultUpdate {
	if s != nil {
		weru.SetError(*s)
	}
	return weru
}

// ClearError clears the value of the "error" field.
func (weru *WorkflowExecutionResultUpdate) ClearError() *WorkflowExecutionResultUpdate {
	weru.mutation.ClearError()
	return weru
}

// SetMeta sets the "meta" field.
func (weru *WorkflowExecutionResultUpdate) SetMeta(m map[string]interface{}) *WorkflowExecutionResultUpdate {
	weru.mutation.SetMeta(m)
	return weru
}

// ClearMeta clears the value of the "meta" field.
func (weru *WorkflowExecutionResultUpdate) ClearMeta() *WorkflowExecutionResultUpdate {
	weru.mutation.ClearMeta()
	return weru
}

// SetNumberOfNodes sets the "number_of_nodes" field.
func (weru *WorkflowExecutionResultUpdate) SetNumberOfNodes(i int) *WorkflowExecutionResultUpdate {
	weru.mutation.ResetNumberOfNodes()
	weru.mutation.SetNumberOfNodes(i)
	return weru
}

// SetNillableNumberOfNodes sets the "number_of_nodes" field if the given value is not nil.
func (weru *WorkflowExecutionResultUpdate) SetNillableNumberOfNodes(i *int) *WorkflowExecutionResultUpdate {
	if i != nil {
		weru.SetNumberOfNodes(*i)
	}
	return weru
}

// AddNumberOfNodes adds i to the "number_of_nodes" field.
func (weru *WorkflowExecutionResultUpdate) AddNumberOfNodes(i int) *WorkflowExecutionResultUpdate {
	weru.mutation.AddNumberOfNodes(i)
	return weru
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (weru *WorkflowExecutionResultUpdate) SetWorkflow(w *Workflow) *WorkflowExecutionResultUpdate {
	return weru.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowExecutionResultMutation object of the builder.
func (weru *WorkflowExecutionResultUpdate) Mutation() *WorkflowExecutionResultMutation {
	return weru.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (weru *WorkflowExecutionResultUpdate) ClearWorkflow() *WorkflowExecutionResultUpdate {
	weru.mutation.ClearWorkflow()
	return weru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (weru *WorkflowExecutionResultUpdate) Save(ctx context.Context) (int, error) {
	weru.defaults()
	return withHooks(ctx, weru.sqlSave, weru.mutation, weru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weru *WorkflowExecutionResultUpdate) SaveX(ctx context.Context) int {
	affected, err := weru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (weru *WorkflowExecutionResultUpdate) Exec(ctx context.Context) error {
	_, err := weru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weru *WorkflowExecutionResultUpdate) ExecX(ctx context.Context) {
	if err := weru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weru *WorkflowExecutionResultUpdate) defaults() {
	if _, ok := weru.mutation.UpdateTime(); !ok {
		v := workflowexecutionresult.UpdateDefaultUpdateTime()
		weru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weru *WorkflowExecutionResultUpdate) check() error {
	if v, ok := weru.mutation.Status(); ok {
		if err := workflowexecutionresult.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecutionResult.status": %w`, err)}
		}
	}
	if weru.mutation.WorkflowCleared() && len(weru.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowExecutionResult.workflow"`)
	}
	return nil
}

func (weru *WorkflowExecutionResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := weru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecutionresult.Table, workflowexecutionresult.Columns, sqlgraph.NewFieldSpec(workflowexecutionresult.FieldID, field.TypeUUID))
	if ps := weru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weru.mutation.UpdateTime(); ok {
		_spec.SetField(workflowexecutionresult.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := weru.mutation.Status(); ok {
		_spec.SetField(workflowexecutionresult.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := weru.mutation.StartedAt(); ok {
		_spec.SetField(workflowexecutionresult.FieldStartedAt, field.TypeInt64, value)
	}
	if value, ok := weru.mutation.AddedStartedAt(); ok {
		_spec.AddField(workflowexecutionresult.FieldStartedAt, field.TypeInt64, value)
	}
	if value, ok := weru.mutation.EndedAt(); ok {
		_spec.SetField(workflowexecutionresult.FieldEndedAt, field.TypeInt64, value)
	}
	if value, ok := weru.mutation.AddedEndedAt(); ok {
		_spec.AddField(workflowexecutionresult.FieldEndedAt, field.TypeInt64, value)
	}
	if weru.mutation.EndedAtCleared() {
		_spec.ClearField(workflowexecutionresult.FieldEndedAt, field.TypeInt64)
	}
	if value, ok := weru.mutation.DurationMs(); ok {
		_spec.SetField(workflowexecutionresult.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := weru.mutation.AddedDurationMs(); ok {
		_spec.AddField(workflowexecutionresult.FieldDurationMs, field.TypeInt64, value)
	}
	if weru.mutation.DurationMsCleared() {
		_spec.ClearField(workflowexecutionresult.FieldDurationMs, field.TypeInt64)
	}
	if value, ok := weru.mutation.GlobalLogs(); ok {
		_spec.SetField(workflowexecutionresult.FieldGlobalLogs, field.TypeJSON, value)
	}
	if value, ok := weru.mutation.AppendedGlobalLogs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflowexecutionresult.FieldGlobalLogs, value)
		})
	}
	if weru.mutation.GlobalLogsCleared() {
		_spec.ClearField(workflowexecutionresult.FieldGlobalLogs, field.TypeJSON)
	}
	if value, ok := weru.mutation.Error(); ok {
		_spec.SetField(workflowexecutionresult.FieldError, field.TypeString, value)
	}
	if weru.mutation.ErrorCleared() {
		_spec.ClearField(workflowexecutionresult.FieldError, field.TypeString)
	}
	if value, ok := weru.mutation.Meta(); ok {
		_spec.SetField(workflowexecutionresult.FieldMeta, field.TypeJSON, value)
	}
	if weru.mutation.MetaCleared() {
		_spec.ClearField(workflowexecutionresult.FieldMeta, field.TypeJSON)
	}
	if value, ok := weru.mutation.NumberOfNodes(); ok {
		_spec.SetField(workflowexecutionresult.FieldNumberOfNodes, field.TypeInt, value)
	}
	if value, ok := weru.mutation.AddedNumberOfNodes(); ok {
		_spec.AddField(workflowexecutionresult.FieldNumberOfNodes, field.TypeInt, value)
	}
	if weru.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecutionresult.WorkflowTable,
			Columns: []string{workflowexecutionresult.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weru.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecutionresult.WorkflowTable,
			Columns: []string{workflowexecutionresult.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, weru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecutionresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	weru.mutation.done = true
	return n, nil
}

// WorkflowExecutionResultUpdateOne is the builder for updating a single WorkflowExecutionResult entity.
type WorkflowExecutionResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowExecutionResultMutation
}

// SetUpdateTime sets the "update_time" field.
func (weruo *WorkflowExecutionResultUpdateOne) SetUpdateTime(t time.Time) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.SetUpdateTime(t)
	return weruo
}

// SetWorkflowID sets the "workflow_id" field.
func (weruo *WorkflowExecutionResultUpdateOne) SetWorkflowID(u uuid.UUID) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.SetWorkflowID(u)
	return weruo
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (weruo *WorkflowExecutionResultUpdateOne) SetNillableWorkflowID(u *uuid.UUID) *WorkflowExecutionResultUpdateOne {
	if u != nil {
		weruo.SetWorkflowID(*u)
	}
	return weruo
}

// SetStatus sets the "status" field.
func (weruo *WorkflowExecutionResultUpdateOne) SetStatus(w workflowexecutionresult.Status) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.SetStatus(w)
	return weruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (weruo *WorkflowExecutionResultUpdateOne) SetNillableStatus(w *workflowexecutionresult.Status) *WorkflowExecutionResultUpdateOne {
	if w != nil {
		weruo.SetStatus(*w)
	}
	return weruo
}

// SetStartedAt sets the "started_at" field.
func (weruo *WorkflowExecutionResultUpdateOne) SetStartedAt(i int64) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.ResetStartedAt()
	weruo.mutation.SetStartedAt(i)
	return weruo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (weruo *WorkflowExecutionResultUpdateOne) SetNillableStartedAt(i *int64) *WorkflowExecutionResultUpdateOne {
	if i != nil {
		weruo.SetStartedAt(*i)
	}
	return weruo
}

// AddStartedAt adds i to the "started_at" field.
func (weruo *WorkflowExecutionResultUpdateOne) AddStartedAt(i int64) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.AddStartedAt(i)
	return weruo
}

// SetEndedAt sets the "ended_at" field.
func (weruo *WorkflowExecutionResultUpdateOne) SetEndedAt(i int64) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.ResetEndedAt()
	weruo.mutation.SetEndedAt(i)
	return weruo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (weruo *WorkflowExecutionResultUpdateOne) SetNillableEndedAt(i *int64) *WorkflowExecutionResultUpdateOne {
	if i != nil {
		weruo.SetEndedAt(*i)
	}
	return weruo
}

// AddEndedAt adds i to the "ended_at" field.
func (weruo *WorkflowExecutionResultUpdateOne) AddEndedAt(i int64) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.AddEndedAt(i)
	return weruo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (weruo *WorkflowExecutionResultUpdateOne) ClearEndedAt() *WorkflowExecutionResultUpdateOne {
	weruo.mutation.ClearEndedAt()
	return weruo
}

// SetDurationMs sets the "duration_ms" field.
func (weruo *WorkflowExecutionResultUpdateOne) SetDurationMs(i int64) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.ResetDurationMs()
	weruo.mutation.SetDurationMs(i)
	return weruo
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (weruo *WorkflowExecutionResultUpdateOne) SetNillableDurationMs(i *int64) *WorkflowExecutionResultUpdateOne {
	if i != nil {
		weruo.SetDurationMs(*i)
	}
	return weruo
}

// AddDurationMs adds i to the "duration_ms" field.
func (weruo *WorkflowExecutionResultUpdateOne) AddDurationMs(i int64) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.AddDurationMs(i)
	return weruo
}

// ClearDurationMs clears the value of the "duration_ms" field.
func (weruo *WorkflowExecutionResultUpdateOne) ClearDurationMs() *WorkflowExecutionResultUpdateOne {
	weruo.mutation.ClearDurationMs()
	return weruo
}

// SetGlobalLogs sets the "global_logs" field.
func (weruo *WorkflowExecutionResultUpdateOne) SetGlobalLogs(s []string) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.SetGlobalLogs(s)
	return weruo
}

// AppendGlobalLogs appends s to the "global_logs" field.
func (weruo *WorkflowExecutionResultUpdateOne) AppendGlobalLogs(s []string) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.AppendGlobalLogs(s)
	return weruo
}

// ClearGlobalLogs clears the value of the "global_logs" field.
func (weruo *WorkflowExecutionResultUpdateOne) ClearGlobalLogs() *WorkflowExecutionResultUpdateOne {
	weruo.mutation.ClearGlobalLogs()
	return weruo
}

// SetError sets the "error" field.
func (weruo *WorkflowExecutionResultUpdateOne) SetError(s string) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.SetError(s)
	return weruo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (weruo *WorkflowExecutionResultUpdateOne) SetNillableError(s *string) *WorkflowExecutionResultUpdateOne {
	if s != nil {
		weruo.SetError(*s)
	}
	return weruo
}

// ClearError clears the value of the "error" field.
func (weruo *WorkflowExecutionResultUpdateOne) ClearError() *WorkflowExecutionResultUpdateOne {
	weruo.mutation.ClearError()
	return weruo
}

// SetMeta sets the "meta" field.
func (weruo *WorkflowExecutionResultUpdateOne) SetMeta(m map[string]interface{}) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.SetMeta(m)
	return weruo
}

// ClearMeta clears the value of the "meta" field.
func (weruo *WorkflowExecutionResultUpdateOne) ClearMeta() *WorkflowExecutionResultUpdateOne {
	weruo.mutation.ClearMeta()
	return weruo
}

// SetNumberOfNodes sets the "number_of_nodes" field.
func (weruo *WorkflowExecutionResultUpdateOne) SetNumberOfNodes(i int) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.ResetNumberOfNodes()
	weruo.mutation.SetNumberOfNodes(i)
	return weruo
}

// SetNillableNumberOfNodes sets the "number_of_nodes" field if the given value is not nil.
func (weruo *WorkflowExecutionResultUpdateOne) SetNillableNumberOfNodes(i *int) *WorkflowExecutionResultUpdateOne {
	if i != nil {
		weruo.SetNumberOfNodes(*i)
	}
	return weruo
}

// AddNumberOfNodes adds i to the "number_of_nodes" field.
func (weruo *WorkflowExecutionResultUpdateOne) AddNumberOfNodes(i int) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.AddNumberOfNodes(i)
	return weruo
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (weruo *WorkflowExecutionResultUpdateOne) SetWorkflow(w *Workflow) *WorkflowExecutionResultUpdateOne {
	return weruo.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowExecutionResultMutation object of the builder.
func (weruo *WorkflowExecutionResultUpdateOne) Mutation() *WorkflowExecutionResultMutation {
	return weruo.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (weruo *WorkflowExecutionResultUpdateOne) ClearWorkflow() *WorkflowExecutionResultUpdateOne {
	weruo.mutation.ClearWorkflow()
	return weruo
}

// Where appends a list predicates to the WorkflowExecutionResultUpdate builder.
func (weruo *WorkflowExecutionResultUpdateOne) Where(ps ...predicate.WorkflowExecutionResult) *WorkflowExecutionResultUpdateOne {
	weruo.mutation.Where(ps...)
	return weruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weruo *WorkflowExecutionResultUpdateOne) Select(field string, fields ...string) *WorkflowExecutionResultUpdateOne {
	weruo.fields = append([]string{field}, fields...)
	return weruo
}

// Save executes the query and returns the updated WorkflowExecutionResult entity.
func (weruo *WorkflowExecutionResultUpdateOne) Save(ctx context.Context) (*WorkflowExecutionResult, error) {
	weruo.defaults()
	return withHooks(ctx, weruo.sqlSave, weruo.mutation, weruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weruo *WorkflowExecutionResultUpdateOne) SaveX(ctx context.Context) *WorkflowExecutionResult {
	node, err := weruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weruo *WorkflowExecutionResultUpdateOne) Exec(ctx context.Context) error {
	_, err := weruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weruo *WorkflowExecutionResultUpdateOne) ExecX(ctx context.Context) {
	if err := weruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weruo *WorkflowExecutionResultUpdateOne) defaults() {
	if _, ok := weruo.mutation.UpdateTime(); !ok {
		v := workflowexecutionresult.UpdateDefaultUpdateTime()
		weruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weruo *WorkflowExecutionResultUpdateOne) check() error {
	if v, ok := weruo.mutation.Status(); ok {
		if err := workflowexecutionresult.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "WorkflowExecutionResult.status": %w`, err)}
		}
	}
	if weruo.mutation.WorkflowCleared() && len(weruo.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowExecutionResult.workflow"`)
	}
	return nil
}

func (weruo *WorkflowExecutionResultUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowExecutionResult, err error) {
	if err := weruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowexecutionresult.Table, workflowexecutionresult.Columns, sqlgraph.NewFieldSpec(workflowexecutionresult.FieldID, field.TypeUUID))
	id, ok := weruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowExecutionResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := weruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowexecutionresult.FieldID)
		for _, f := range fields {
			if !workflowexecutionresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowexecutionresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weruo.mutation.UpdateTime(); ok {
		_spec.SetField(workflowexecutionresult.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := weruo.mutation.Status(); ok {
		_spec.SetField(workflowexecutionresult.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := weruo.mutation.StartedAt(); ok {
		_spec.SetField(workflowexecutionresult.FieldStartedAt, field.TypeInt64, value)
	}
	if value, ok := weruo.mutation.AddedStartedAt(); ok {
		_spec.AddField(workflowexecutionresult.FieldStartedAt, field.TypeInt64, value)
	}
	if value, ok := weruo.mutation.EndedAt(); ok {
		_spec.SetField(workflowexecutionresult.FieldEndedAt, field.TypeInt64, value)
	}
	if value, ok := weruo.mutation.AddedEndedAt(); ok {
		_spec.AddField(workflowexecutionresult.FieldEndedAt, field.TypeInt64, value)
	}
	if weruo.mutation.EndedAtCleared() {
		_spec.ClearField(workflowexecutionresult.FieldEndedAt, field.TypeInt64)
	}
	if value, ok := weruo.mutation.DurationMs(); ok {
		_spec.SetField(workflowexecutionresult.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := weruo.mutation.AddedDurationMs(); ok {
		_spec.AddField(workflowexecutionresult.FieldDurationMs, field.TypeInt64, value)
	}
	if weruo.mutation.DurationMsCleared() {
		_spec.ClearField(workflowexecutionresult.FieldDurationMs, field.TypeInt64)
	}
	if value, ok := weruo.mutation.GlobalLogs(); ok {
		_spec.SetField(workflowexecutionresult.FieldGlobalLogs, field.TypeJSON, value)
	}
	if value, ok := weruo.mutation.AppendedGlobalLogs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflowexecutionresult.FieldGlobalLogs, value)
		})
	}
	if weruo.mutation.GlobalLogsCleared() {
		_spec.ClearField(workflowexecutionresult.FieldGlobalLogs, field.TypeJSON)
	}
	if value, ok := weruo.mutation.Error(); ok {
		_spec.SetField(workflowexecutionresult.FieldError, field.TypeString, value)
	}
	if weruo.mutation.ErrorCleared() {
		_spec.ClearField(workflowexecutionresult.FieldError, field.TypeString)
	}
	if value, ok := weruo.mutation.Meta(); ok {
		_spec.SetField(workflowexecutionresult.FieldMeta, field.TypeJSON, value)
	}
	if weruo.mutation.MetaCleared() {
		_spec.ClearField(workflowexecutionresult.FieldMeta, field.TypeJSON)
	}
	if value, ok := weruo.mutation.NumberOfNodes(); ok {
		_spec.SetField(workflowexecutionresult.FieldNumberOfNodes, field.TypeInt, value)
	}
	if value, ok := weruo.mutation.AddedNumberOfNodes(); ok {
		_spec.AddField(workflowexecutionresult.FieldNumberOfNodes, field.TypeInt, value)
	}
	if weruo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecutionresult.WorkflowTable,
			Columns: []string{workflowexecutionresult.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weruo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowexecutionresult.WorkflowTable,
			Columns: []string{workflowexecutionresult.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowExecutionResult{config: weruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowexecutionresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	weruo.mutation.done = true
	return _node, nil
}
