// Code generated by ent, DO NOT EDIT.

package workflowexecutionresult

import (
	"XKA/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldUpdateTime, v))
}

// WorkflowID applies equality check predicate on the "workflow_id" field. It's identical to WorkflowIDEQ.
func WorkflowID(v uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldWorkflowID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldStartedAt, v))
}

// EndedAt applies equality check predicate on the "ended_at" field. It's identical to EndedAtEQ.
func EndedAt(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldEndedAt, v))
}

// DurationMs applies equality check predicate on the "duration_ms" field. It's identical to DurationMsEQ.
func DurationMs(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldDurationMs, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldError, v))
}

// NumberOfNodes applies equality check predicate on the "number_of_nodes" field. It's identical to NumberOfNodesEQ.
func NumberOfNodes(v int) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldNumberOfNodes, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLTE(FieldUpdateTime, v))
}

// WorkflowIDEQ applies the EQ predicate on the "workflow_id" field.
func WorkflowIDEQ(v uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldWorkflowID, v))
}

// WorkflowIDNEQ applies the NEQ predicate on the "workflow_id" field.
func WorkflowIDNEQ(v uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNEQ(FieldWorkflowID, v))
}

// WorkflowIDIn applies the In predicate on the "workflow_id" field.
func WorkflowIDIn(vs ...uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIn(FieldWorkflowID, vs...))
}

// WorkflowIDNotIn applies the NotIn predicate on the "workflow_id" field.
func WorkflowIDNotIn(vs ...uuid.UUID) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotIn(FieldWorkflowID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotIn(FieldStatus, vs...))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLTE(FieldStartedAt, v))
}

// EndedAtEQ applies the EQ predicate on the "ended_at" field.
func EndedAtEQ(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldEndedAt, v))
}

// EndedAtNEQ applies the NEQ predicate on the "ended_at" field.
func EndedAtNEQ(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNEQ(FieldEndedAt, v))
}

// EndedAtIn applies the In predicate on the "ended_at" field.
func EndedAtIn(vs ...int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIn(FieldEndedAt, vs...))
}

// EndedAtNotIn applies the NotIn predicate on the "ended_at" field.
func EndedAtNotIn(vs ...int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotIn(FieldEndedAt, vs...))
}

// EndedAtGT applies the GT predicate on the "ended_at" field.
func EndedAtGT(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGT(FieldEndedAt, v))
}

// EndedAtGTE applies the GTE predicate on the "ended_at" field.
func EndedAtGTE(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGTE(FieldEndedAt, v))
}

// EndedAtLT applies the LT predicate on the "ended_at" field.
func EndedAtLT(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLT(FieldEndedAt, v))
}

// EndedAtLTE applies the LTE predicate on the "ended_at" field.
func EndedAtLTE(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLTE(FieldEndedAt, v))
}

// EndedAtIsNil applies the IsNil predicate on the "ended_at" field.
func EndedAtIsNil() predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIsNull(FieldEndedAt))
}

// EndedAtNotNil applies the NotNil predicate on the "ended_at" field.
func EndedAtNotNil() predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotNull(FieldEndedAt))
}

// DurationMsEQ applies the EQ predicate on the "duration_ms" field.
func DurationMsEQ(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldDurationMs, v))
}

// DurationMsNEQ applies the NEQ predicate on the "duration_ms" field.
func DurationMsNEQ(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNEQ(FieldDurationMs, v))
}

// DurationMsIn applies the In predicate on the "duration_ms" field.
func DurationMsIn(vs ...int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIn(FieldDurationMs, vs...))
}

// DurationMsNotIn applies the NotIn predicate on the "duration_ms" field.
func DurationMsNotIn(vs ...int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotIn(FieldDurationMs, vs...))
}

// DurationMsGT applies the GT predicate on the "duration_ms" field.
func DurationMsGT(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGT(FieldDurationMs, v))
}

// DurationMsGTE applies the GTE predicate on the "duration_ms" field.
func DurationMsGTE(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGTE(FieldDurationMs, v))
}

// DurationMsLT applies the LT predicate on the "duration_ms" field.
func DurationMsLT(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLT(FieldDurationMs, v))
}

// DurationMsLTE applies the LTE predicate on the "duration_ms" field.
func DurationMsLTE(v int64) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLTE(FieldDurationMs, v))
}

// DurationMsIsNil applies the IsNil predicate on the "duration_ms" field.
func DurationMsIsNil() predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIsNull(FieldDurationMs))
}

// DurationMsNotNil applies the NotNil predicate on the "duration_ms" field.
func DurationMsNotNil() predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotNull(FieldDurationMs))
}

// GlobalLogsIsNil applies the IsNil predicate on the "global_logs" field.
func GlobalLogsIsNil() predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIsNull(FieldGlobalLogs))
}

// GlobalLogsNotNil applies the NotNil predicate on the "global_logs" field.
func GlobalLogsNotNil() predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotNull(FieldGlobalLogs))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldContainsFold(FieldError, v))
}

// MetaIsNil applies the IsNil predicate on the "meta" field.
func MetaIsNil() predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIsNull(FieldMeta))
}

// MetaNotNil applies the NotNil predicate on the "meta" field.
func MetaNotNil() predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotNull(FieldMeta))
}

// NumberOfNodesEQ applies the EQ predicate on the "number_of_nodes" field.
func NumberOfNodesEQ(v int) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldEQ(FieldNumberOfNodes, v))
}

// NumberOfNodesNEQ applies the NEQ predicate on the "number_of_nodes" field.
func NumberOfNodesNEQ(v int) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNEQ(FieldNumberOfNodes, v))
}

// NumberOfNodesIn applies the In predicate on the "number_of_nodes" field.
func NumberOfNodesIn(vs ...int) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldIn(FieldNumberOfNodes, vs...))
}

// NumberOfNodesNotIn applies the NotIn predicate on the "number_of_nodes" field.
func NumberOfNodesNotIn(vs ...int) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldNotIn(FieldNumberOfNodes, vs...))
}

// NumberOfNodesGT applies the GT predicate on the "number_of_nodes" field.
func NumberOfNodesGT(v int) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGT(FieldNumberOfNodes, v))
}

// NumberOfNodesGTE applies the GTE predicate on the "number_of_nodes" field.
func NumberOfNodesGTE(v int) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldGTE(FieldNumberOfNodes, v))
}

// NumberOfNodesLT applies the LT predicate on the "number_of_nodes" field.
func NumberOfNodesLT(v int) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLT(FieldNumberOfNodes, v))
}

// NumberOfNodesLTE applies the LTE predicate on the "number_of_nodes" field.
func NumberOfNodesLTE(v int) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.FieldLTE(FieldNumberOfNodes, v))
}

// HasWorkflow applies the HasEdge predicate on the "workflow" edge.
func HasWorkflow() predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkflowTable, WorkflowColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowWith applies the HasEdge predicate on the "workflow" edge with a given conditions (other predicates).
func HasWorkflowWith(preds ...predicate.Workflow) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(func(s *sql.Selector) {
		step := newWorkflowStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowExecutionResult) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowExecutionResult) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowExecutionResult) predicate.WorkflowExecutionResult {
	return predicate.WorkflowExecutionResult(sql.NotPredicates(p))
}
