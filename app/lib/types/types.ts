export interface WorkflowNode {
  id: string;
  type: string | null;
  data: Record<string, any>;
}

export interface WorkflowEdge {
  id: string;
  source: string;
  target: string;
  type: string | null;
}

export interface SaveWorkflowResult {
  success: boolean;
  data?: any;
  error?: string;
  id?: string; // ðŸŽ¯ ID optionnel mais prÃ©sent si success = true
}


export interface NodeResponse {
  nodeId: string;
  nodeType: string;
  status: 'success' | 'error' | 'skipped';  
  timestamp: number;     // Unix timestamp
  durationMs: number;    // DurÃ©e en millisecondes
  result?: any;          // RÃ©sultat brut (interface{} â†’ any)
  error?: string;        // *string â†’ string optionnel
  logs?: string[];       // []string optionnel
  meta?: any;            // interface{} â†’ any optionnel
}

// ðŸŽ¯ Interface pour le rÃ©sultat global du workflow
export interface WorkflowExecutionResult {
  workflowId: string;
  status: 'success' | 'error' | 'running' | 'skipped';  // ðŸŽ¯ Union type
  startedAt: number;     // Unix timestamp
  endedAt: number;       // Unix timestamp
  durationMs: number;    // DurÃ©e en millisecondes
  nodes: NodeResponse[]; // []NodeResponse â†’ NodeResponse[]
  logs: string[];        // GlobalLogs â†’ logs (renommÃ©)
  error?: string;        // *string â†’ string optionnel
  meta?: Record<string, any>;  // map[string]interface{} â†’ Record<string, any>
  numberOfNodes: number; // Nombre total de nodes dans le workflow
}

